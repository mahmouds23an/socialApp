{"ast":null,"code":"// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */new Map();\n    this.#mutationDefaults = /* @__PURE__ */new Map();\n    this.#mountCount = 0;\n  }\n\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters,\n      status: \"pending\"\n    }).length;\n  }\n\n  getQueryData(queryKey) {\n    return this.#queryCache.find({\n      queryKey\n    })?.state.data;\n  }\n\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    return cachedData !== void 0 ? Promise.resolve(cachedData) : this.fetchQuery(options);\n  }\n\n  getQueriesData(filters) {\n    return this.getQueryCache().findAll(filters).map(_ref => {\n      let {\n        queryKey,\n        state\n      } = _ref;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.#queryCache.find({\n      queryKey\n    });\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === \"undefined\") {\n      return void 0;\n    }\n\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(filters).map(_ref2 => {\n      let {\n        queryKey\n      } = _ref2;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n\n  getQueryState(queryKey) {\n    return this.#queryCache.find({\n      queryKey\n    })?.state;\n  }\n\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: filters.refetchType ?? filters.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const fetchOptions = { ...options,\n      cancelRefetch: options?.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n\n    if (typeof defaultedOptions.retry === \"undefined\") {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.#mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.#queryCache;\n  }\n\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  defaultQueryOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n\n    if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n\n    if (typeof defaultedOptions.throwOnError === \"undefined\") {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n\n    if (typeof defaultedOptions.networkMode === \"undefined\" && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n\n    return { ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n\n};\nexport { QueryClient };","map":{"version":3,"mappings":";AAAA,SACEA,gBADF,EAEEC,OAFF,EAGEC,qBAHF,EAIEC,IAJF,EAKEC,eALF,QAMO,YANP;AAOA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AAyCO,IAAMC,cAAN,MAAkB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,gBAA4C;AAAA,QAAhCC,MAAgC,uEAAJ,EAAI;AAC1C,SAAK,WAAL,GAAmBA,OAAOC,UAAP,IAAqB,IAAIT,UAAJ,EAAxC;AACA,SAAK,cAAL,GAAsBQ,OAAOE,aAAP,IAAwB,IAAIT,aAAJ,EAA9C;AACA,SAAK,eAAL,GAAuBO,OAAOG,cAAP,IAAyB,EAAhD;AACA,SAAK,cAAL,GAAsB,mBAAIC,GAAJ,EAAtB;AACA,SAAK,iBAAL,GAAyB,mBAAIA,GAAJ,EAAzB;AACA,SAAK,WAAL,GAAmB,CAAnB;AACF;;AAEAC,UAAc;AACZ,SAAK,WAAL;AACA,QAAI,KAAK,WAAL,KAAqB,CAAzB,EAA4B;AAE5B,SAAK,iBAAL,GAAyBX,aAAaY,SAAb,CAAuB,MAAM;AACpD,UAAIZ,aAAaa,SAAb,EAAJ,EAA8B;AAC5B,aAAKC,qBAAL;AACA,aAAK,WAAL,CAAiBC,OAAjB;AACF;AACD,KALwB,CAAzB;AAMA,SAAK,kBAAL,GAA0Bd,cAAcW,SAAd,CAAwB,MAAM;AACtD,UAAIX,cAAce,QAAd,EAAJ,EAA8B;AAC5B,aAAKF,qBAAL;AACA,aAAK,WAAL,CAAiBG,QAAjB;AACF;AACD,KALyB,CAA1B;AAMF;;AAEAC,YAAgB;AACd,SAAK,WAAL;AACA,QAAI,KAAK,WAAL,KAAqB,CAAzB,EAA4B;AAE5B,SAAK,iBAAL;AACA,SAAK,iBAAL,GAAyB,MAAzB;AAEA,SAAK,kBAAL;AACA,SAAK,kBAAL,GAA0B,MAA1B;AACF;;AAEAC,aAAWC,OAAX,EAA2C;AACzC,WAAO,KAAK,WAAL,CAAiBC,OAAjB,CAAyB,EAAE,GAAGD,OAAL;AAAcE,mBAAa;AAA3B,KAAzB,EACJC,MADH;AAEF;;AAEAC,aAAWJ,OAAX,EAA8C;AAC5C,WAAO,KAAK,cAAL,CAAoBC,OAApB,CAA4B,EAAE,GAAGD,OAAL;AAAcK,cAAQ;AAAtB,KAA5B,EAA+DF,MAAtE;AACF;;AAYAG,eAAaC,QAAb,EAAiC;AAC/B,WAAO,KAAK,WAAL,CAAiBC,IAAjB,CAAsB;AAAED;AAAF,KAAtB,GAAqCE,KAArC,CAA2CC,IAAlD;AACF;;AAEAC,kBAMEC,OANF,EAOkB;AAChB,UAAMC,aAAa,KAAKP,YAAL,CAAyBM,QAAQL,QAAjC,CAAnB;AAEA,WAAOM,eAAe,MAAf,GACHC,QAAQC,OAAR,CAAgBF,UAAhB,CADG,GAEH,KAAKG,UAAL,CAAgBJ,OAAhB,CAFJ;AAGF;;AAEAK,iBACEjB,OADF,EAE+C;AAC7C,WAAO,KAAKkB,aAAL,GACJjB,OADI,CACID,OADJ,EAEJmB,GAFI,CAEA,QAAyB;AAAA,UAAxB;AAAEZ,gBAAF;AAAYE;AAAZ,OAAwB;AAC5B,YAAMC,OAAOD,MAAMC,IAAnB;AACA,aAAO,CAACH,QAAD,EAAWG,IAAX,CAAP;AACD,KALI,CAAP;AAMF;;AAEAU,eAUEb,QAVF,EAWEc,OAXF,EAeET,OAfF,EAgBoC;AAClC,UAAMU,QAAQ,KAAK,WAAL,CAAiBd,IAAjB,CAA4C;AAAED;AAAF,KAA5C,CAAd;AACA,UAAMgB,WAAWD,OAAOb,KAAP,CAAaC,IAA9B;AACA,UAAMA,OAAOrC,iBAAiBgD,OAAjB,EAA0BE,QAA1B,CAAb;;AAEA,QAAI,OAAOb,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,MAAP;AACF;;AAEA,UAAMc,mBAAmB,KAAKC,mBAAL,CAMvB;AAAElB;AAAF,KANuB,CAAzB;AAQA,WAAO,KAAK,WAAL,CACJmB,KADI,CACE,IADF,EACQF,gBADR,EAEJG,OAFI,CAEIjB,IAFJ,EAEU,EAAE,GAAGE,OAAL;AAAcgB,cAAQ;AAAtB,KAFV,CAAP;AAGF;;AAEAC,iBACE7B,OADF,EAEEqB,OAFF,EAGET,OAHF,EAI+C;AAC7C,WAAO9B,cAAcgD,KAAd,CAAoB,MACzB,KAAKZ,aAAL,GACGjB,OADH,CACWD,OADX,EAEGmB,GAFH,CAEO;AAAA,UAAC;AAAEZ;AAAF,OAAD;AAAA,aAAkB,CACrBA,QADqB,EAErB,KAAKa,YAAL,CAAgCb,QAAhC,EAA0Cc,OAA1C,EAAmDT,OAAnD,CAFqB,CAAlB;AAAA,KAFP,CADK,CAAP;AAQF;;AAEAmB,gBACExB,QADF,EAEgD;AAC9C,WAAO,KAAK,WAAL,CAAiBC,IAAjB,CAA4C;AAAED;AAAF,KAA5C,GAA2DE,KAAlE;AACF;;AAEAuB,gBAAchC,OAAd,EAA4C;AAC1C,UAAMb,aAAa,KAAK,WAAxB;AACAL,kBAAcgD,KAAd,CAAoB,MAAM;AACxB3C,iBAAWc,OAAX,CAAmBD,OAAnB,EAA4BiC,OAA5B,CAAqCX,KAAD,IAAW;AAC7CnC,mBAAW+C,MAAX,CAAkBZ,KAAlB;AACD,OAFD;AAGD,KAJD;AAKF;;AAEAa,eAAanC,OAAb,EAAqCY,OAArC,EAA4E;AAC1E,UAAMzB,aAAa,KAAK,WAAxB;AAEA,UAAMiD,iBAAsC;AAC1CC,YAAM,QADoC;AAE1C,SAAGrC;AAFuC,KAA5C;AAKA,WAAOlB,cAAcgD,KAAd,CAAoB,MAAM;AAC/B3C,iBAAWc,OAAX,CAAmBD,OAAnB,EAA4BiC,OAA5B,CAAqCX,KAAD,IAAW;AAC7CA,cAAMgB,KAAN;AACD,OAFD;AAGA,aAAO,KAAKC,cAAL,CAAoBH,cAApB,EAAoCxB,OAApC,CAAP;AACD,KALM,CAAP;AAMF;;AAEA4B,kBAGiB;AAAA,QAFfxC,OAEe,uEAFS,EAET;AAAA,QADfyC,aACe,uEADgB,EAChB;AACf,UAAMC,yBAAyB;AAAEC,cAAQ,IAAV;AAAgB,SAAGF;AAAnB,KAA/B;AAEA,UAAMG,WAAW9D,cAAcgD,KAAd,CAAoB,MACnC,KAAK,WAAL,CACG7B,OADH,CACWD,OADX,EAEGmB,GAFH,CAEQG,KAAD,IAAWA,MAAMuB,MAAN,CAAaH,sBAAb,CAFlB,CADe,CAAjB;AAMA,WAAO5B,QAAQgC,GAAR,CAAYF,QAAZ,EAAsBG,IAAtB,CAA2BvE,IAA3B,EAAiCwE,KAAjC,CAAuCxE,IAAvC,CAAP;AACF;;AAEAyE,sBAGiB;AAAA,QAFfjD,OAEe,uEAFmB,EAEnB;AAAA,QADfY,OACe,uEADc,EACd;AACf,WAAO9B,cAAcgD,KAAd,CAAoB,MAAM;AAC/B,WAAK,WAAL,CAAiB7B,OAAjB,CAAyBD,OAAzB,EAAkCiC,OAAlC,CAA2CX,KAAD,IAAW;AACnDA,cAAM4B,UAAN;AACD,OAFD;;AAIA,UAAIlD,QAAQmD,WAAR,KAAwB,MAA5B,EAAoC;AAClC,eAAOrC,QAAQC,OAAR,EAAP;AACF;;AACA,YAAMqB,iBAAsC,EAC1C,GAAGpC,OADuC;AAE1CqC,cAAMrC,QAAQmD,WAAR,IAAuBnD,QAAQqC,IAA/B,IAAuC;AAFH,OAA5C;AAIA,aAAO,KAAKE,cAAL,CAAoBH,cAApB,EAAoCxB,OAApC,CAAP;AACD,KAbM,CAAP;AAcF;;AAEA2B,mBAGiB;AAAA,QAFfvC,OAEe,uEAFgB,EAEhB;AAAA,QADfY,OACe;AACf,UAAMwC,eAAe,EACnB,GAAGxC,OADgB;AAEnByC,qBAAezC,SAASyC,aAAT,IAA0B;AAFtB,KAArB;AAIA,UAAMT,WAAW9D,cAAcgD,KAAd,CAAoB,MACnC,KAAK,WAAL,CACG7B,OADH,CACWD,OADX,EAEGsD,MAFH,CAEWhC,KAAD,IAAW,CAACA,MAAMiC,UAAN,EAFtB,EAGGpC,GAHH,CAGQG,KAAD,IAAW;AACd,UAAIkC,UAAUlC,MAAMmC,KAAN,CAAY,MAAZ,EAAuBL,YAAvB,CAAd;;AACA,UAAI,CAACA,aAAaM,YAAlB,EAAgC;AAC9BF,kBAAUA,QAAQR,KAAR,CAAcxE,IAAd,CAAV;AACF;;AACA,aAAO8C,MAAMb,KAAN,CAAYP,WAAZ,KAA4B,QAA5B,GACHY,QAAQC,OAAR,EADG,GAEHyC,OAFJ;AAGD,KAXH,CADe,CAAjB;AAeA,WAAO1C,QAAQgC,GAAR,CAAYF,QAAZ,EAAsBG,IAAtB,CAA2BvE,IAA3B,CAAP;AACF;;AAEAwC,aAOEJ,OAPF,EAckB;AAChB,UAAMY,mBAAmB,KAAKC,mBAAL,CAAyBb,OAAzB,CAAzB;;AAGA,QAAI,OAAOY,iBAAiBmC,KAAxB,KAAkC,WAAtC,EAAmD;AACjDnC,uBAAiBmC,KAAjB,GAAyB,KAAzB;AACF;;AAEA,UAAMrC,QAAQ,KAAK,WAAL,CAAiBI,KAAjB,CAAuB,IAAvB,EAA6BF,gBAA7B,CAAd;AAEA,WAAOF,MAAMsC,aAAN,CAAoBpC,iBAAiBqC,SAArC,IACHvC,MAAMmC,KAAN,CAAYjC,gBAAZ,CADG,GAEHV,QAAQC,OAAR,CAAgBO,MAAMb,KAAN,CAAYC,IAA5B,CAFJ;AAGF;;AAEAoD,gBAMElD,OANF,EAOiB;AACf,WAAO,KAAKI,UAAL,CAAgBJ,OAAhB,EAAyBmC,IAAzB,CAA8BvE,IAA9B,EAAoCwE,KAApC,CAA0CxE,IAA1C,CAAP;AACF;;AAEAuF,qBAOEnD,OAPF,EAc4C;AAC1CA,YAAQoD,QAAR,GAAmBjF,sBAKjB6B,QAAQqD,KALS,CAAnB;AAMA,WAAO,KAAKjD,UAAL,CAAgBJ,OAAhB,CAAP;AACF;;AAEAsD,wBAOEtD,OAPF,EAciB;AACf,WAAO,KAAKmD,kBAAL,CAAwBnD,OAAxB,EAAiCmC,IAAjC,CAAsCvE,IAAtC,EAA4CwE,KAA5C,CAAkDxE,IAAlD,CAAP;AACF;;AAEAkB,0BAA0C;AACxC,WAAO,KAAK,cAAL,CAAoBA,qBAApB,EAAP;AACF;;AAEAwB,kBAA4B;AAC1B,WAAO,KAAK,WAAZ;AACF;;AAEAiD,qBAAkC;AAChC,WAAO,KAAK,cAAZ;AACF;;AAEAC,sBAAoC;AAClC,WAAO,KAAK,eAAZ;AACF;;AAEAC,oBAAkBzD,OAAlB,EAAiD;AAC/C,SAAK,eAAL,GAAuBA,OAAvB;AACF;;AAEA0D,mBACE/D,QADF,EAEEK,OAFF,EAKQ;AACN,SAAK,cAAL,CAAoB2D,GAApB,CAAwBjG,QAAQiC,QAAR,CAAxB,EAA2C;AACzCA,cADyC;AAEzClB,sBAAgBuB;AAFyB,KAA3C;AAIF;;AAEA4D,mBACEjE,QADF,EAEiD;AAC/C,UAAMkE,WAAW,CAAC,GAAG,KAAK,cAAL,CAAoBC,MAApB,EAAJ,CAAjB;AAEA,QAAIC,SAAwD,EAA5D;AAEAF,aAASxC,OAAT,CAAkB2C,YAAD,IAAkB;AACjC,UAAInG,gBAAgB8B,QAAhB,EAA0BqE,aAAarE,QAAvC,CAAJ,EAAsD;AACpDoE,iBAAS,EAAE,GAAGA,MAAL;AAAa,aAAGC,aAAavF;AAA7B,SAAT;AACF;AACD,KAJD;AAKA,WAAOsF,MAAP;AACF;;AAEAE,sBACEC,WADF,EAEElE,OAFF,EAGQ;AACN,SAAK,iBAAL,CAAuB2D,GAAvB,CAA2BjG,QAAQwG,WAAR,CAA3B,EAAiD;AAC/CA,iBAD+C;AAE/CzF,sBAAgBuB;AAF+B,KAAjD;AAIF;;AAEAmE,sBACED,WADF,EAE+C;AAC7C,UAAML,WAAW,CAAC,GAAG,KAAK,iBAAL,CAAuBC,MAAvB,EAAJ,CAAjB;AAEA,QAAIC,SAAsD,EAA1D;AAEAF,aAASxC,OAAT,CAAkB2C,YAAD,IAAkB;AACjC,UAAInG,gBAAgBqG,WAAhB,EAA6BF,aAAaE,WAA1C,CAAJ,EAA4D;AAC1DH,iBAAS,EAAE,GAAGA,MAAL;AAAa,aAAGC,aAAavF;AAA7B,SAAT;AACF;AACD,KAJD;AAMA,WAAOsF,MAAP;AACF;;AAEAlD,sBAQEb,OARF,EA8BE;AACA,QAAIA,SAASoE,UAAb,EAAyB;AACvB,aAAOpE,OAAP;AAOF;;AAEA,UAAMY,mBAAmB,EACvB,GAAG,KAAK,eAAL,CAAqByD,OADD;AAEvB,UAAIrE,SAASL,QAAT,IAAqB,KAAKiE,gBAAL,CAAsB5D,QAAQL,QAA9B,CAAzB,CAFuB;AAGvB,SAAGK,OAHoB;AAIvBoE,kBAAY;AAJW,KAAzB;;AAOA,QAAI,CAACxD,iBAAiB0D,SAAtB,EAAiC;AAC/B1D,uBAAiB0D,SAAjB,GAA6B3G,sBAC3BiD,iBAAiBjB,QADU,EAE3BiB,gBAF2B,CAA7B;AAIF;;AAGA,QAAI,OAAOA,iBAAiB2D,kBAAxB,KAA+C,WAAnD,EAAgE;AAC9D3D,uBAAiB2D,kBAAjB,GACE3D,iBAAiB4D,WAAjB,KAAiC,QADnC;AAEF;;AACA,QAAI,OAAO5D,iBAAiBkC,YAAxB,KAAyC,WAA7C,EAA0D;AACxDlC,uBAAiBkC,YAAjB,GAAgC,CAAC,CAAClC,iBAAiB6D,QAAnD;AACF;;AAEA,QACE,OAAO7D,iBAAiB4D,WAAxB,KAAwC,WAAxC,IACA5D,iBAAiB8D,SAFnB,EAGE;AACA9D,uBAAiB4D,WAAjB,GAA+B,cAA/B;AACF;;AAEA,WAAO5D,gBAAP;AAOF;;AAEA+D,yBACE3E,OADF,EAEK;AACH,QAAIA,SAASoE,UAAb,EAAyB;AACvB,aAAOpE,OAAP;AACF;;AACA,WAAO,EACL,GAAG,KAAK,eAAL,CAAqB4E,SADnB;AAEL,UAAI5E,SAASkE,WAAT,IACF,KAAKC,mBAAL,CAAyBnE,QAAQkE,WAAjC,CADF,CAFK;AAIL,SAAGlE,OAJE;AAKLoE,kBAAY;AALP,KAAP;AAOF;;AAEAS,UAAc;AACZ,SAAK,WAAL,CAAiBA,KAAjB;AACA,SAAK,cAAL,CAAoBA,KAApB;AACF;;AA/euB,CAAlB","names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","constructor","config","queryCache","mutationCache","defaultOptions","Map","mount","subscribe","isFocused","resumePausedMutations","onFocus","isOnline","onOnline","unmount","isFetching","filters","findAll","fetchStatus","length","isMutating","status","getQueryData","queryKey","find","state","data","ensureQueryData","options","cachedData","Promise","resolve","fetchQuery","getQueriesData","getQueryCache","map","setQueryData","updater","query","prevData","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","invalidate","refetchType","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","suspense","persister","defaultMutationOptions","mutations","clear"],"sources":["D:\\Work\\socialApp\\client\\node_modules\\@tanstack\\query-core\\src\\queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    return this.#queryCache.find({ queryKey })?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    return cachedData !== undefined\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(options)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.getQueryCache()\n      .findAll(filters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const query = this.#queryCache.find<TInferredQueryFnData>({ queryKey })\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = DefaultError>(\n    queryKey: QueryKey,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.#queryCache.find<TQueryFnData, TError>({ queryKey })?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.#mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: QueryObserverOptions<any, any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: Omit<MutationObserverOptions<any, any, any, any>, 'mutationKey'>,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options?:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.throwOnError === 'undefined') {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (\n      typeof defaultedOptions.networkMode === 'undefined' &&\n      defaultedOptions.persister\n    ) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}