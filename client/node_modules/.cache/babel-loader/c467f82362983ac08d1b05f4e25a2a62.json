{"ast":null,"code":"\"use client\"; // src/useMutation.ts\n\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { shouldThrowError } from \"./utils.js\";\n\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(() => new MutationObserver(client, options));\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(React.useCallback(onStoreChange => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  const mutate = React.useCallback((variables, mutateOptions) => {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n\n  return { ...result,\n    mutate,\n    mutateAsync: result.mutate\n  };\n}\n\nfunction noop() {}\n\nexport { useMutation };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,sBAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAUO,SAASC,WAAT,CAMLC,OANK,EAOLC,WAPK,EAQmD;AACxD,QAAMC,SAASL,eAAeI,WAAf,CAAf;AAEA,QAAM,CAACE,QAAD,IAAmBT,eACvB,MACE,IAAIC,gBAAJ,CACEO,MADF,EAEEF,OAFF,CAFqB,CAAzB;AAQMN,kBAAU,MAAM;AACpBS,aAASC,UAAT,CAAoBJ,OAApB;AACF,GAFM,EAEH,CAACG,QAAD,EAAWH,OAAX,CAFG;AAIN,QAAMK,SAAeX,2BACbA,kBACHY,aAAD,IACEH,SAASI,SAAT,CAAmBX,cAAcY,UAAd,CAAyBF,aAAzB,CAAnB,CAFE,EAGJ,CAACH,QAAD,CAHI,CADa,EAMnB,MAAMA,SAASM,gBAAT,EANa,EAOnB,MAAMN,SAASM,gBAAT,EAPa,CAArB;AAUA,QAAMC,SAAehB,kBAGnB,CAACiB,SAAD,EAAYC,aAAZ,KAA8B;AAC5BT,aAASO,MAAT,CAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,KAA1C,CAAgDC,IAAhD;AACF,GALmB,EAMnB,CAACX,QAAD,CANmB,CAArB;;AASA,MACEE,OAAOU,KAAP,IACAjB,iBAAiBK,SAASH,OAAT,CAAiBgB,YAAlC,EAAgD,CAACX,OAAOU,KAAR,CAAhD,CAFF,EAGE;AACA,UAAMV,OAAOU,KAAb;AACF;;AAEA,SAAO,EAAE,GAAGV,MAAL;AAAaK,UAAb;AAAqBO,iBAAaZ,OAAOK;AAAzC,GAAP;AACF;;AAGA,SAASI,IAAT,GAAgB,CAAC","names":["React","MutationObserver","notifyManager","useQueryClient","shouldThrowError","useMutation","options","queryClient","client","observer","setOptions","result","onStoreChange","subscribe","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","noop","error","throwOnError","mutateAsync"],"sources":["D:\\Work\\socialApp\\client\\node_modules\\@tanstack\\react-query\\src\\useMutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module"}